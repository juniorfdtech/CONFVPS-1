#!/bin/bash
b="\033[1;37m"
v="\033[1;32m"
Ver="\033[1;31m"

# Secure OpenVPN server installer for Debian, Ubuntu, CentOS and Arch Linux
# https://github.com/Angristan/OpenVPN-install


if [[ "$EUID" -ne 0 ]]; then
	echo "Sorry, you need to run this as root"
	exit 1
fi

# if [[ ! -e /dev/net/tun ]]; then
	#echo "TUN is not available"
	#exit 2
#fi

if grep -qs "CentOS release 5" "/etc/redhat-release"; then
	echo "CentOS 5 is too old and not supported"
	exit 3
fi

if [[ -e /etc/debian_version ]]; then
	OS="debian"
	# Getting the version number, to verify that a recent version of OpenVPN is available
	VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
	RCLOCAL='/etc/rc.local'
	SYSCTL='/etc/sysctl.conf'
	if [[ "$VERSION_ID" != 'VERSION_ID="7"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="8"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="12.04"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="14.04"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="16.04"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="16.10"' ]]; then
		echo "Your version of Debian/Ubuntu is not supported."
		echo "I can't install a recent version of OpenVPN on your system."
		echo ""
		echo "However, if you're using Debian unstable/testing, or Ubuntu beta,"
		echo "then you can continue, a recent version of OpenVPN is available on these."
		echo "Keep in mind they are not supported, though."
		while [[ $CONTINUE != "y" && $CONTINUE != "n" ]]; do
			read -p "Continue ? [y/n]: " -e CONTINUE
		done
		if [[ "$CONTINUE" = "n" ]]; then
			echo "Ok, bye !"
			exit 4
		fi
	fi
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
	RCLOCAL='/etc/rc.d/rc.local'
	SYSCTL='/etc/sysctl.conf'
	# Needed for CentOS 7
	chmod +x /etc/rc.d/rc.local
elif [[ -e /etc/arch-release ]]; then
	OS=arch
	RCLOCAL='/etc/rc.local'
	SYSCTL='/etc/sysctl.d/openvpn.conf'
else
	echo "Looks like you aren't running this installer on a Debian, Ubuntu, CentOS or ArchLinux system"
	exit 4
fi

echo -e "\033[0m                  \033[47;30m"$Ver"OPENVPN INSTALLER\033[0m"
echo ""
echo ""
 newclient () {
	# Generates the custom client.ovpn
	cp /etc/openvpn/client-template.txt ~/$1.ovpn
	echo "<ca>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/$1.ovpn
	echo "</ca>" >> ~/$1.ovpn
	echo "<cert>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >> ~/$1.ovpn
	echo "</cert>" >> ~/$1.ovpn
	echo "<key>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/private/$1.key >> ~/$1.ovpn
	echo "</key>" >> ~/$1.ovpn
	echo "key-direction 1" >> ~/$1.ovpn
	echo "<tls-auth>" >> ~/$1.ovpn
	cat /etc/openvpn/tls-auth.key >> ~/$1.ovpn
	echo "</tls-auth>" >> ~/$1.ovpn
}

# Try to get our IP from the system and fallback to the Internet.
# I do this to make the script compatible with NATed servers (LowEndSpirit/Scaleway)
# and to avoid getting an IPv6.
IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
if [[ "$IP" = "" ]]; then
	IP=$(wget -qO- ipv4.icanhazip.com)
fi

if [[ -e /etc/openvpn/server.conf ]]; then
	while :
	do
	clear
		echo -e ""$b"\033[0m                   \033[47;30m========>>>OpenVPN<<<========="
		
		echo -e "\033[0m"
		echo ""
		echo -e "$b===========>>>"$v"OPENVPN JA INSTALADO"$b"<<<==========$b"
		echo ""
		echo -e ""$b"[$v 1 $b]$Ver CRIAR NOVO CLIENT OVPN"
		echo -e ""$b"[$v 2 $b]$Ver EXCLUIR CLIENTE"
		echo -e ""$b"[$v 3 $b]$Ver REMOVER OPENVPN"
		echo -e ""$b"[$v 4 $b]$Ver MENU"
		echo ""
		echo -e ""$b"Escolha uma opcao"
		read -p ": " option
		case $option in
			1)
			echo ""
         echo ""
         echo -e "$b=======>>>Digite Um Nome<<<========"
			echo -e ""$v"Qual nome para o novo usuário ?"
        echo ""
		  echo "Não use acentos e pontos"
        echo -e "$b"
			read -p "Nome Usuário: " -e -i Cliente CLIENT
			cd /etc/openvpn/easy-rsa/
			./easyrsa build-client-full $CLIENT nopass
			# Generates the custom client.ovpn
			newclient "$CLIENT"
cd /var/www/html/openvpn*
zip $CLIENT.zip $CLIENT.ovpn
			echo ""
			echo -e "$b""Usuário "$v"$CLIENT "$b"adicionado, disponível em "$v"~/$CLIENT.ovpn"
			exit
			;;
			2)
			NUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
			if [[ "$NUMBEROFCLIENTS" = '0' ]]; then
				echo ""
				echo -e ""Ver"Não existe nenhum usuário !$b"
				exit 5
			fi
			echo ""
			echo -e ""$b"Qual usuário você deseja apagar ?"
			tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
			if [[ "$NUMBEROFCLIENTS" = '1' ]]; then
				read -p "Selecione um usuário [1]: " USUARIONUMERO
			else
				read -p "Selecione um usuário [1-$NUMBEROFCLIENTS]: " USUARIONUMERO
			fi
			CLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENTNUMBER"p)
			cd /etc/openvpn/easy-rsa/
			./easyrsa --batch revoke $CLIENT
			./easyrsa gen-crl
			rm -rf pki/reqs/$CLIENT.req
			rm -rf pki/private/$CLIENT.key
			rm -rf pki/issued/$CLIENT.crt
			rm -rf /etc/openvpn/crl.pem
			cp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem
			echo ""
			echo -e ""$b"Usuário "$v"$CLIENT "$b"apagado"
			sleep 1
			echo "Saindo..."
			sleep 1
			exit
			;;
			3)
			echo ""
			read -p "Tem certeza que deseja remover o  OpenVPN? [y/n]: " -e -i n REMOVER
			if [[ "$REMOVER" = 'y' ]]; then
				PORT=$(grep '^port ' /etc/openvpn/server.conf | cut -d " " -f 2)
				if pgrep firewalld; then
					# Using both permanent and not permanent rules to avoid a firewalld reload.
					firewall-cmd --zone=public --remove-port=$PORT/udp
					firewall-cmd --zone=trusted --remove-source=10.8.0.0/24
					firewall-cmd --permanent --zone=public --remove-port=$PORT/udp
					firewall-cmd --permanent --zone=trusted --remove-source=10.8.0.0/24
				fi
				if iptables -L -n | grep -qE 'REJECT|DROP'; then
					sed -i "/iptables -I INPUT -p udp --dport $PORT -j ACCEPT/d" $RCLOCAL
					sed -i "/iptables -I FORWARD -s 10.8.0.0\/24 -j ACCEPT/d" $RCLOCAL
					sed -i "/iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT/d" $RCLOCAL
				fi
				sed -i '/iptables -t nat -A POSTROUTING -s 10.8.0.0\/24 -j SNAT --to /d' $RCLOCAL
				if hash sestatus 2>/dev/null; then
					if sestatus | grep "Current mode" | grep -qs "enforcing"; then
						if [[ "$PORT" != '1194' ]]; then
							semanage port -d -t openvpn_port_t -p udp $PORT
						fi
					fi
				fi
				if [[ "$OS" = 'debian' ]]; then
					apt-get remove --purge -y openvpn openvpn-blacklist 1>/dev/null 2>/dev/null
apt-get remove autoremove -y 1>/dev/null 2>/dev/null
				elif [[ "$OS" = 'arch' ]]; then
					pacman -R openvpn --noconfirm
				else
					yum remove openvpn -y
				fi
				rm -rf /etc/openvpn
				rm -rf /usr/share/doc/openvpn*
				echo ""
				echo "OpenVPN removido !"
			else
				echo ""
				echo "Operação cancelada !"
			fi
			exit
			;;
			4) CONFVPS;;
		esac
	done
else
	clear
	echo -e "\033[0m                  \033[47;30m"$Ver"OPENVPN INSTALLER\033[0m"
	echo ""
	echo ""
	# OpenVPN setup and first user creation.
	IP=$(cat /etc/IP)
   echo -e ""$b"=========>>>CONFIRME SEU IP<<<=========="
echo -e "$v"
read -p "CONFIRME SEU IP: " -e -i $IP IP
echo ""
echo -e ""$b"=========>>>ESCOLHA UMA PORTA<<<=========="
echo ""
	echo -e "$v""QUAL PORTA VOCE DESEJA USAR?"
echo ""
echo -e ""$b"[$v 1 $b]$Ver 443"
echo -e ""$b"[$v 2 $b]$Ver 21"
echo -e ""$b"[$v 3 $b]$Ver 53"
echo -e ""$b"[$v 4 $b]$Ver 1194"
echo -e ""$b"[$v 5 $b]$Ver 81"
echo ""
	read -p "Porta: " -e -i 53 PORT
	echo ""
echo -e ""$b"=========>>>ESCOLHA PROTOCOLO<<<=========="
echo ""
	echo -e ""$v"QUAL PROTOCOLO VOCE DESEJA USA NO OPENVPN?"
echo ""
echo -e ""$b"[$v 1 $b]$Ver TCP"
echo -e ""$b"[$v 2 $b]$Ver UDP"
echo ""
	while [[ $PROTOCOL != "UDP" && $PROTOCOL != "TCP" ]]; do
		read -p "PROTOCOLO  [UDP/TCP]: " -e -i TCP PROTOCOL
	done
	echo ""
echo -e ""$b"=========>>>ESCOLHA UM DNS<<<=========="
	echo -e ""$v"QUAL DNS VOCE DESEJA USA NA SUA VPN?"
echo ""
	echo -e ""$b"[$v 1 $b]$Ver DNS DO SISTEMA"
	echo -e ""$b"[$v 2 $b]$Ver FDN"
	echo -e ""$b"[$v 3 $b]$Ver DNS.WATCH"
	echo -e ""$b"[$v 4 $b]$Ver OpenDNS"
	echo -e ""$b"[$v 5 $b]$Ver Google "
	while [[ $DNS != "1" && $DNS != "2" && $DNS != "3" && $DNS != "4" && $DNS != "5" ]]; do
echo ""
		read -p "DNS [ 1-5 ]: " -e -i 2 DNS
	done
	echo ""
	CIPHER="cipher AES-128-CBC"
	
	echo -e ""$b"=========>>>ESCOLHA TAMANHO DA CAHAVE<<<=========="
	echo ""
	echo -e "$v""Escolha o tamanho de chave Diffie-Hellman você deseja usar:"
	echo ""
	echo -e ""$b"[$v 1 $b]$Ver 2048 bits "$b"("$v"RAPIDA"$b")"
	echo -e ""$b"[$v 2 $b]$Ver 3072 bits "$b"("$v"RECOMENDADO MELHOR COMPROMISSO"$b")"
	echo -e ""$b"[$v 3 $b]$Ver 4096 bits "$b"("$v"SEGURA"$b")"
	while [[ $DH_KEY_SIZE != "1" && $DH_KEY_SIZE != "2" && $DH_KEY_SIZE != "3" ]]; do
		read -p "DH key size [1-3]: " -e -i 2 DH_KEY_SIZE
	done
	case $DH_KEY_SIZE in
		1)
		DH_KEY_SIZE="2048"
		;;
		2)
		DH_KEY_SIZE="3072"
		;;
		3)
		DH_KEY_SIZE="4096"
		;;
	esac
	echo ""
	echo -e ""$b"=========>>>ESCOLHA TAMANHO DA CHAVE RSA<<<=========="
	echo ""
	echo -e "$v""Escolha o tamanho da chave RSA você deseja usar"
	echo ""
	echo -e ""$b"[$v 1 $b]$Ver 2048 bits "$b"("$v"RAPIDA"$b")"
	echo -e ""$b"[$v 2 $b]$Ver 3072 bits "$b"("$v"RECOMENDADO MELHOR COMPROMISSO"$b")"
	echo -e ""$b"[$v 3 $b]$Ver 4096 bits "$b"("$v"SEGURA"$b")"
	while [[ $RSA_KEY_SIZE != "1" && $RSA_KEY_SIZE != "2" && $RSA_KEY_SIZE != "3" ]]; do
	echo ""
		read -p "DH key size [ 1-3 ]: " -e -i 2 RSA_KEY_SIZE
	done
	case $RSA_KEY_SIZE in
		1)
		RSA_KEY_SIZE="2048"
		;;
		2)
		RSA_KEY_SIZE="3072"
		;;
		3)
		RSA_KEY_SIZE="4096"
		;;
	esac
	echo ""
	echo ""
	echo -e ""$b"=========>>>DIGITE UM NOME<<<=========="
	echo ""
	echo -e ""$v"AGORA APENAS DIGITE O NOME DO CLIENTE"
	while [[ $CLIENT = "" ]]; do
		echo -e "Nao Use characters Especial"
		echo -e "$b"
		read -p "Nome do Cliente: " -e -i Cliente CLIENT
	done
	echo ""
	echo -e ""$v"Tudo Certo!"
	read -n1 -r -p "De Enter Pra Continuar..."
clear
echo -e "\033[0m                  \033[47;30m"$Ver"CONFIGURANDO...\033[0m"
echo ""
echo -e ""$v"INSTALANDO PACOTES"

	if [[ "$OS" = 'debian' ]]; then
		apt-get install ca-certificates -y 1>/dev/null 2>/dev/null
		# We add the OpenVPN repo to get the latest version.
		# Debian 7
		if [[ "$VERSION_ID" = 'VERSION_ID="7"' ]]; then
			echo "deb http://swupdate.openvpn.net/apt wheezy main" > /etc/apt/sources.list.d/swupdate-openvpn.list 1>/dev/null 2>/dev/null
			wget -O - 1>/dev/null 2>/dev/null https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add - 1>/dev/null 2>/dev/null
			apt-get update 1>/dev/null 2>/dev/null
		fi
		# Debian 8
		if [[ "$VERSION_ID" = 'VERSION_ID="8"' ]]; then
			echo "deb http://swupdate.openvpn.net/apt jessie main" > /etc/apt/sources.list.d/swupdate-openvpn.list
			wget -O - 1>/dev/null 2>/dev/null https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add - 1>/dev/null 2>/dev/null
			apt-get update 1>/dev/null 2>/dev/null
		fi
		# Ubuntu 12.04
		if [[ "$VERSION_ID" = 'VERSION_ID="12.04"' ]]; then
			echo "deb http://swupdate.openvpn.net/apt precise main" > /etc/apt/sources.list.d/swupdate-openvpn.list
			wget -O - 1>/dev/null 2>/dev/null https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add - 1>/dev/null 2>/dev/null
			apt-get update 1>/dev/null 2>/dev/null
		fi
		# Ubuntu 14.04
		if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
			echo "deb http://swupdate.openvpn.net/apt trusty main" > /etc/apt/sources.list.d/swupdate-openvpn.list
			wget -O - 1>/dev/null 2>/dev/null https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add - 1>/dev/null 2>/dev/null
			apt-get update 1>/dev/null 2>/dev/null
		fi
		# Ubuntu >= 16.04 and Debian > 8 have OpenVPN > 2.3.3 without the need of a third party repository.
		# The we install OpenVPN
		apt-get install openvpn iptables openssl wget ca-certificates curl -y 1>/dev/null 2>/dev/null
	elif [[ "$OS" = 'centos' ]]; then
		yum install epel-release -y 1>/dev/null 2>/dev/null
		yum install openvpn iptables openssl wget ca-certificates curl -y 1>/dev/null 2>/dev/null
	else
		# Else, the distro is ArchLinux
		echo ""
		echo ""
		echo "As you're using ArchLinux, I need to update the packages on your system to install those I need."
		echo "Not doing that could cause problems between dependencies, or missing files in repositories."
		echo ""
		echo "Continuing will update your installed packages and install needed ones."
		while [[ $CONTINUE != "y" && $CONTINUE != "n" ]]; do
			read -p "Continue ? [y/n]: " -e -i y CONTINUE
		done
		if [[ "$CONTINUE" = "n" ]]; then
			echo "Ok, bye !"
			exit 4
		fi
		
		if [[ "$OS" = 'arch' ]]; then
		# Install rc.local
		echo "[Unit]
Description=/etc/rc.local compatibility

[Service]
Type=oneshot
ExecStart=/etc/rc.local
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/rc-local.service
			chmod +x /etc/rc.local
			systemctl enable rc-local.service
			if ! grep '#!' $RCLOCAL; then
				echo "#!/bin/bash" > $RCLOCAL
			fi
		fi
		
		# Install dependencies
		pacman -Syu openvpn iptables openssl wget ca-certificates curl --needed --noconfirm
		if [[ "$OS" = 'arch' ]]; then
			touch /etc/iptables/iptables.rules # iptables won't start if this file does not exist
			systemctl enable iptables
			systemctl start iptables
		fi
	fi
	# Find out if the machine uses nogroup or nobody for the permissionless group
	if grep -qs "^nogroup:" /etc/group; then
	        NOGROUP=nogroup
	else
        	NOGROUP=nobody
	fi

	# An old version of easy-rsa was available by default in some openvpn packages
	echo -e "$b   [$v OK $b]"
	echo -e ""$v"GERANDO CHAVES..."
	if [[ -d /etc/openvpn/easy-rsa/ ]]; then
		rm -rf /etc/openvpn/easy-rsa/ 1>/dev/null 2>/dev/null
	fi
	# Get easy-rsa
	wget -O ~/EasyRSA-3.0.1.tgz https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz 1>/dev/null 2>/dev/null
	tar xzf ~/EasyRSA-3.0.1.tgz -C ~/ 1>/dev/null 2>/dev/null
	mv ~/EasyRSA-3.0.1/ /etc/openvpn/ 1>/dev/null 2>/dev/null
	mv /etc/openvpn/EasyRSA-3.0.1/ /etc/openvpn/easy-rsa/ 1>/dev/null 2>/dev/null
	chown -R root:root /etc/openvpn/easy-rsa/ 1>/dev/null 2>/dev/null
	rm -rf ~/EasyRSA-3.0.1.tgz 1>/dev/null 2>/dev/null
	cd /etc/openvpn/easy-rsa/ 
	echo "set_var EASYRSA_KEY_SIZE $RSA_KEY_SIZE" > vars 1>/dev/null 2>/dev/null
	# Create the PKI, set up the CA, the DH params and the server + client certificates
	./easyrsa init-pki 1>/dev/null 2>/dev/null
	./easyrsa --batch build-ca nopass 1>/dev/null 2>/dev/null
	openssl dhparam $DH_KEY_SIZE -out dh.pem 1>/dev/null 2>/dev/null
	./easyrsa build-server-full server nopass 1>/dev/null 2>/dev/null
	./easyrsa build-client-full $CLIENT nopass 1>/dev/null 2>/dev/null
	./easyrsa gen-crl 1>/dev/null 2>/dev/null
	# generate tls-auth key
	openvpn --genkey --secret /etc/openvpn/tls-auth.key 1>/dev/null 2>/dev/null
	# Move all the generated files
	cp pki/ca.crt pki/private/ca.key dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
	# Make cert revocation list readable for non-root
	chmod 644 /etc/openvpn/crl.pem
	echo -e "$b   [$v OK $b]"
	echo -e ""$v"CRIANDO CLIENTE OVPN..."
	# Generate server.conf
	echo "port $PORT" > /etc/openvpn/server.conf
	if [[ "$PROTOCOL" = 'UDP' ]]; then
		echo "proto udp" >> /etc/openvpn/server.conf
	elif [[ "$PROTOCOL" = 'TCP' ]]; then
		echo "proto tcp" >> /etc/openvpn/server.conf
	fi
	echo "dev tun
user nobody
group $NOGROUP
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" >> /etc/openvpn/server.conf
	# DNS resolvers
	case $DNS in
		1)
		# Obtain the resolvers from resolv.conf and use them for OpenVPN
		grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
			echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server.conf
		done
		;;
		2) #FDN
		echo 'push "dhcp-option DNS 80.67.169.12"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 80.67.169.40"' >> /etc/openvpn/server.conf
		;;
		3) #DNS.WATCH
		echo 'push "dhcp-option DNS 84.200.69.80"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 84.200.70.40"' >> /etc/openvpn/server.conf
		;;
		4) #OpenDNS
		echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server.conf
		;;
		5) #Google
		echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
		;;
	esac
echo 'push "redirect-gateway def1 bypass-dhcp" '>> /etc/openvpn/server.conf
echo "crl-verify crl.pem
ca ca.crt
cert server.crt
key server.key
tls-auth tls-auth.key 0
dh dh.pem
auth SHA256
$CIPHER
tls-server
tls-version-min 1.2
tls-cipher TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
status openvpn.log
verb 3" >> /etc/openvpn/server.conf

	# Create the sysctl configuration file if needed (mainly for Arch Linux)
	if [[ ! -e $SYSCTL ]]; then
		touch $SYSCTL
	fi

	# Enable net.ipv4.ip_forward for the system
	sed -i '/\<net.ipv4.ip_forward\>/c\net.ipv4.ip_forward=1' $SYSCTL
	if ! grep -q "\<net.ipv4.ip_forward\>" $SYSCTL; then
		echo 'net.ipv4.ip_forward=1' >> $SYSCTL
	fi
	# Avoid an unneeded reboot
	echo 1 > /proc/sys/net/ipv4/ip_forward
	# Set NAT for the VPN subnet
	iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP
	sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP" $RCLOCAL
	if pgrep firewalld; then
		# We don't use --add-service=openvpn because that would only work with
		# the default port. Using both permanent and not permanent rules to
		# avoid a firewalld reload.
		if [[ "$PROTOCOL" = 'UDP' ]]; then
			firewall-cmd --zone=public --add-port=$PORT/udp
			firewall-cmd --permanent --zone=public --add-port=$PORT/udp
		elif [[ "$PROTOCOL" = 'TCP' ]]; then
			firewall-cmd --zone=public --add-port=$PORT/tcp
			firewall-cmd --permanent --zone=public --add-port=$PORT/tcp
		fi
		firewall-cmd --zone=trusted --add-source=10.8.0.0/24
		firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24
	fi
	if iptables -L -n | grep -qE 'REJECT|DROP'; then
		# If iptables has at least one REJECT rule, we asume this is needed.
		# Not the best approach but I can't think of other and this shouldn't
		# cause problems.
		if [[ "$PROTOCOL" = 'UDP' ]]; then
			iptables -I INPUT -p udp --dport $PORT -j ACCEPT
		elif [[ "$PROTOCOL" = 'TCP' ]]; then
			iptables -I INPUT -p tcp --dport $PORT -j ACCEPT
		fi
		iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
		iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
		if [[ "$PROTOCOL" = 'UDP' ]]; then
			sed -i "1 a\iptables -I INPUT -p udp --dport $PORT -j ACCEPT" $RCLOCAL
		elif [[ "$PROTOCOL" = 'TCP' ]]; then
			sed -i "1 a\iptables -I INPUT -p tcp --dport $PORT -j ACCEPT" $RCLOCAL
		fi
		sed -i "1 a\iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $RCLOCAL
		sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
	fi
	# If SELinux is enabled and a custom port was selected, we need this
	if hash sestatus 2>/dev/null; then
		if sestatus | grep "Current mode" | grep -qs "enforcing"; then
			if [[ "$PORT" != '1194' ]]; then
				# semanage isn't available in CentOS 6 by default
				if ! hash semanage 2>/dev/null; then
					yum install policycoreutils-python -y 1>/dev/null 2>/dev/null
				fi
				if [[ "$PROTOCOL" = 'UDP' ]]; then
					semanage port -a -t openvpn_port_t -p udp $PORT
				elif [[ "$PROTOCOL" = 'TCP' ]]; then
					semanage port -a -t openvpn_port_t -p tcp $PORT
				fi
			fi
		fi
	fi
	echo -e "$b   [$v OK $b]"
	echo -e ""$v"RENICIANDO SERVICOS$b"
	# And finally, restart OpenVPN
	if [[ "$OS" = 'debian' ]]; then
		# Little hack to check for systemd
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service 1>/dev/null 2>/dev/null
		else
			/etc/init.d/openvpn restart 1>/dev/null 2>/dev/null
		fi
	else
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service 1>/dev/null 2>/dev/null
			systemctl enable openvpn@server.service 1>/dev/null 2>/dev/null
		else
			service openvpn restart 1>/dev/null 2>/dev/null
			chkconfig openvpn on 1>/dev/null 2>/dev/null
		fi
	fi
	# Try to detect a NATed connection and ask about it to potential LowEndSpirit/Scaleway users
	EXTERNALIP=$(wget -qO- ipv4.icanhazip.com)
	if [[ "$IP" != "$EXTERNALIP" ]]; then
		echo ""
		echo "Looks like your server is behind a NAT!"
		echo ""
                echo "If your server is NATed (e.g. LowEndSpirit, Scaleway, or behind a router),"
                echo "then I need to know the address that can be used to access it from outside."
                echo "If that's not the case, just ignore this and leave the next field blank"
                read -p "External IP or domain name: " -e USEREXTERNALIP
		if [[ "$USEREXTERNALIP" != "" ]]; then
			IP=$USEREXTERNALIP
		fi
	fi
	# client-template.txt is created so we have a template to add further users later
	echo "client" > /etc/openvpn/client-template.txt
	if [[ "$PROTOCOL" = 'UDP' ]]; then
		echo "proto udp" >> /etc/openvpn/client-template.txt
	elif [[ "$PROTOCOL" = 'TCP' ]]; then
		echo "proto tcp-client" >> /etc/openvpn/client-template.txt
	fi
	echo "remote $IP $PORT
dev tun
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA256
$CIPHER
tls-client
tls-version-min 1.2
tls-cipher TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
setenv opt block-outside-dns
verb 3" >> /etc/openvpn/client-template.txt
echo -e "$b   [$v OK $b]"
	# Generate the custom client.ovpn
	newclient "$CLIENT"
	echo ""
	echo -e ""$b"============>>>FEITO<<<==========="
	echo ""
	echo -e ""$b"Instalação completa !"
	echo ""
	echo "Arquivo disponível em "$v"~/$CLIENT.ovpn"$b""
fi
exit 0;
